# Check for os type
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    # linux
    platform='linux'
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
    platform='osx'
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    # freebsd
    platform='freebsd'
fi

# function to append path
pathadd() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="$1${PATH:+":$PATH"}"
    fi
}

# allow awsudo to get correct env profile
# requires aws, awsudo and jq
use-profile() {
if [ -x "$(command -v awsudo)" ] && [ -x "$(command -v jq)" ] && [ -x "$(command -v aws)" ]; then
    export $(awsudo $1 | xargs)
    echo -n "Assumed role: "
    aws sts get-caller-identity | jq .Arn
fi
}

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Some exports I like
export VISUAL=vim
export EDITOR="$VISUAL"
export LC_ALL="en_US.UTF-8"

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=5000
HISTFILESIZE=5000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in xterm-color)
    color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
lh() { ls -al "$@" | grep '^\.'; }

# trying to fix colors in tmux on OSX
# and bash-completion
# alias tmux="TERM=screen-256color tmux"
if [[ $platform == 'osx' ]]; then
    alias ic='cd ~/Library/Mobile\ Documents/com~apple~CloudDocs'
    alias ls='ls -G'
    pathadd /usr/local/opt/openssl/bin:$PATH
    [ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# ssh-agent so I don't have to keep typing my passphrase
SSH_ENV=$HOME/.ssh/environment

# start the ssh-agent
function start_agent {
    echo "Initializing new SSH agent..."
    # spawn ssh-agent
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add
}

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
}
else
    start_agent;
fi

# add path for $HOME/bin if it exists
if [ -f "$HOME/bin" ]; then
    pathadd "$HOME/bin"
fi

# add ruby gem path for chef if it exists
#pathadd $HOME/.chefdk/gem/ruby/2.1.0/bin

# grab the path for the new Chef if chef is installed
# add ruby gem path for chef if it exists
if command -v chef >/dev/null 2>&1; then
    eval "$(chef shell-init bash)"
fi

if command -v rbenv 1>/dev/null 2>&1; then
    eval "$(rbenv init -)"
fi

# kubectl auto completion
if [ -x "$(command -v kubectl)" ]; then
    source <(kubectl completion bash);
fi

# pyenv for linux to work
if [[ $platform == 'linux' ]]; then
    PYENV_ROOT="$HOME/.pyenv"
    pathadd $PYENV_ROOT/bin
fi

# pyenv
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
fi
if which pyenv-virtualenv-init; then
    eval "$(pyenv virtualenv-init -)"
fi

eval "$(pyenv virtualenv-init -)"
