#!/bin/bash

# Check for OS type reset and source default path using source_file
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    platform="linux"
	source_file="/etc/environment"
    if [[ -s $source_file ]]; then # not zero
#        echo "Sourcing $source_file"
        source $source_file
    elif source_file="/etc/profile"; then # Debian
#        echo "Sourcing $source_file"
        source $source_file
    else
	    PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
	fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
    platform="osx"
    PATH=""
    source "/etc/profile"
fi

## No source_file found, or the above broke the path, set some default
# if [[ ${#PATH} == "0" ]]; then
#   PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
# fi

# distinguish machine arch
get_machine_arch() {
    machine_arch=""
    case $(uname -m) in
        i386)     machine_arch="386" ;;
        i686)     machine_arch="386" ;;
        x86_64)   machine_arch="amd64" ;;
        arm64)    machine_arch="arm64" ;;
        aarch64)  dpkg --print-architecture | grep -q "arm64" && machine_arch="arm64" || machine_arch="arm" ;;
    esac
    echo $machine_arch
}
arch=$(get_machine_arch)

# functions to modify path
path_prepend() {
    for arg in "$@"; do
        if [[ ":${PATH}:" != *":${arg}:"* ]]; then
            export PATH="${arg}${PATH:+":$PATH"}"
        fi
    done
}

path_append() {
    for arg in "$@"; do
        if [[ ":${PATH}:" != *":${arg}:"* ]]; then
            export PATH="${PATH:+"$PATH:"}${arg}"
        fi
    done
}

# Allow user to set aws profile in env requires aws and jq
# assume working role
awr() {
    if [ -x "$(command -v jq)" ] && [ -x "$(command -v aws)" ]; then
        export AWS_PROFILE=$1
        echo -n "Assumed working role: "
        aws sts get-caller-identity | jq .Arn
    fi
}

# describe availability zone, active region, get using availability zones for ec2
daz() {
    if [ -x "$(command -v aws)" ]; then
    echo "aws ec2 describe-availability-zones: "
    aws ec2 describe-availability-zones --output text --query 'AvailabilityZones[0].[RegionName]'
    fi
}

# curl, follow links. Could use wget but this is how to do it with curl
fcurl() {
    if [ "$1" == "-h" ]; then
        echo "curl and follow links to target_url"
        echo "Usage: $FUNCNAME target_url"
        return -1
    else
        if [ -x "$(command -v curl)" ]; then
            curl -Ls -O -w %{url_effective} $1 &> /dev/null
        fi
    fi
}

# get aws caller identity
gci() {
    if [ -x "$(command -v jq)" ] && [ -x "$(command -v aws)" ]; then
        echo "aws sts get-caller-identity: "
        aws sts get-caller-identity | jq .Arn
    fi
}

# get session token
gst() {
    if [ -x "$(command -v jq)" ] && [ -x "$(command -v aws)" ]; then
        if [ -z "${PROFILE}" ] && [ -z ${1} ]; then
            echo "Usage is gst PROFILE"
            return -1
        else
            PROFILE=$1
            ARN=$(aws configure get role_arn --profile $PROFILE)
            AWS_CREDS=$(aws sts assume-role --role-arn $ARN --role-session-name session --profile $PROFILE)
            export AWS_PROFILE=$1
            export AWS_ACCESS_KEY_ID=$(echo $AWS_CREDS | jq -r ".Credentials.AccessKeyId")
            export AWS_SECRET_ACCESS_KEY=$(echo $AWS_CREDS | jq -r ".Credentials.SecretAccessKey")
            export AWS_SESSION_TOKEN=$(echo $AWS_CREDS | jq -r ".Credentials.SessionToken")
        fi
        echo "aws sts get-caller-identity: "
        aws sts get-caller-identity | jq .Arn
    fi
}

# get local ip addresse(s)
gip() {
    ip address | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'
}

# get public ip address
gpip() {
    if [ -x "$(command -v curl)" ]; then
        curl https://checkip.amazonaws.com
    fi
}

# list account alias
laa() {
    if [ -x "$(command -v jq)" ] && [ -x "$(command -v aws)" ]; then
        echo "aws iam list-account-aliases: "
        aws iam list-account-aliases | jq .AccountAliases[0]
    fi
}

# list working roles
lwr() {
    if [ -x "$(command -v aws)" ]; then
        echo "List of working roles in ~/.aws/config: "
    #   aws configure list-profiles
        grep '\[profile' ~/.aws/config | awk '{print $2}' | sed 's/]//' | sort
    fi
}


# change up N directories
cd..() {
    cd $(printf "%0.s../" $(seq 1 $1 ));
}

# list s3 contents
ls3() {
    python3 -c "
exec('''
from boto3 import client
conn = client('s3')
for key in conn.list_objects(Bucket='${1}')['Contents']:
    print(key['Key'])
    ''')
    "
}

# make and change to directory
mkcdir() {
    mkdir -p -- "$1" &&
        cd -P -- "$1"
}

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Some exports I like
export VISUAL=vim
export EDITOR="$VISUAL"
export LC_ALL="en_US.UTF-8"

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=5000
HISTFILESIZE=5000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in xterm-color|screen-256color)
    color_prompt=yes
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# Set prompts
if [[ $platform != "osx" ]]; then
    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt
fi

if [[ $platform == "osx" ]]; then
    if [ "$color_prompt" = yes ]; then
        CLICOLOR=1
        LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx # solarized
        #   LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd # default linux
        #   LSCOLORS=GxFxCxDxBxegedabagaced # MacOS default
        PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in xterm|rxvt*)
    color_prompt=yes
    PS1="\[\033]0;\u@\h: \w\007\]bash\\$ "
    #   PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Alias definitions.
source  ~/.bash_aliases

# some more ls aliases, use these even if bash_alias is missing
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# some osx stuff...like bash_completion
if [[ $platform == "osx" ]]; then
    alias ic="cd ~/Library/Mobile\ Documents/com~apple~CloudDocs"
fi

# brew install location changed for m1 vs intel
if [[ $platform == "osx" ]] && [[ $arch == "arm64" ]]; then
    if [[ -d "/opt/homebrew" ]]; then
        BREW_PREFIX="$(/opt/homebrew/bin/brew --prefix)"
    fi
fi
if [[ $platform == "osx" ]] && [[ $arch != "arm64" ]]; then
    if [[ -d "/usr/local/Homebrew" ]]; then
        BREW_PREFIX="$(/usr/local/Homebrew/bin/brew --prefix)"
    fi
fi
if [[ $BREW_PREFIX ]]; then
    path_prepend $BREW_PREFIX/bin:$BREW_PREFIX/sbin
    if [ -r "$BREW_PREFIX/etc/profile.d/bash_completion.sh" ]; then
        . "$BREW_PREFIX/etc/profile.d/bash_completion.sh"
#        export BASH_COMPLETION_COMPAT_DIR="$BREW_PREFIX/etc/bash_completion.d"
    fi
fi

#bash-completion for normal system
if [[ $platform == "linux" ]]; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    fi
fi

#kubectl bash completion
if [ -x "$(command -v kubectl)" ]; then
    source <(kubectl completion bash)
    complete -F __start_kubectl k
    complete -F __start_kubectl kprod
fi

# ssh-agent so I don't have to keep typing my passphrase
SSH_ENV=$HOME/.ssh/environment

# start the ssh-agent
function start_agent {
    echo "Initializing new SSH agent..."
    # spawn ssh-agent
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add
}

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi

# check/set DISPLAY for ssh client
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_CONNECTION" ]; then
    export DISPLAY=:0.0
fi

# Path Stuff Here
# docker cli from docker desktop
if [[ $platform == "osx" ]]; then
    if [[ -d "/Applications/Docker.app/Contents/Resources/bin" ]]; then
        path_append /Applications/Docker.app/Contents/Resources/bin
    fi
fi
# add path for $HOME/bin if it exists
if [ -d "$HOME/bin" ]; then
    path_append $HOME/bin
fi

# add path for /opt/build if it exists
if [ -d "/opt/build" ]; then
    path_append /opt/build
fi

# add path for /opt/install if it exists
if [ -d "/opt/install" ]; then
    path_append /opt/install
fi

# add path for $HOME/.local/bin if it exists, pipx requirement
if [ -d "$HOME/.local/bin" ]; then
    path_append $HOME/.local/bin
fi

# add path for .rbenv if using it
if [ -d "$HOME/.rbenv" ]; then
    RBENV_ROOT="$HOME/.rbenv"
    path_prepend $RBENV_ROOT/bin
fi

# add path for .tfenv if using it
if [ -d "$HOME/.tfenv" ]; then
    TFENV_ROOT="$HOME/.tfenv"
    path_prepend $TFENV_ROOT/bin
fi

# add path for pyenv if using it
if [ -d "$HOME/.pyenv" ]; then
    PYENV_ROOT="$HOME/.pyenv"
    path_prepend $PYENV_ROOT/bin
    eval "$(pyenv init --path)"
    export PYTHON_CONFIGURE_OPTS="--enable-shared"
fi

#chef inspec outside of rbenv
if [ -d "/opt/inspec/bin" ]; then
    path_append /opt/inspec/bin
fi

# golang if installed
if [ -d "/usr/local/go" ]; then
    GOPATH="/usr/local/go"
    path_append $GOPATH/bin
fi

if [ -d "$HOME/go" ]; then
    GOPATH="$HOME/go"
    if [[ $platform == "osx" ]]; then
        GOROOT="/usr/local/opt/go/libexec" #nonstandard location
        path_append $GOROOT/bin
    fi
    path_append $GOPATH/bin
fi

# grab the path for the new Chef if chef is installed
# add ruby gem path for chef if it exists
if [ -x "$(command -v chef)" ]; then
    eval "$(chef shell-init bash)"
fi

if [ -x "$(command -v rbenv)" ]; then
    eval "$(rbenv init -)"
fi

# kubectl auto completion
if [ -x "$(command -v kubectl)" ]; then
    complete -F __start_kubectl k
    source <(kubectl completion bash);
fi

# microk8s kubectl auto completion
if [ -x "$(command -v microk8s)" ]; then
    source <(mk completion bash | sed "s/kubectl/mk/g")
fi

# Sexy Solarized Bash Prompt, inspired by "Extravagant Zsh Prompt"
# modified from
# http://seanponeil.com/blog/2012/09/13/sexy-solarized-bash-prompt/

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
      BASE03=$(tput setaf 234)
      BASE02=$(tput setaf 235)
      BASE01=$(tput setaf 240)
      BASE00=$(tput setaf 241)
      BASE0=$(tput setaf 244)
      BASE1=$(tput setaf 245)
      BASE2=$(tput setaf 254)
      BASE3=$(tput setaf 230)
      YELLOW=$(tput setaf 136)
      ORANGE=$(tput setaf 166)
      RED=$(tput setaf 160)
      MAGENTA=$(tput setaf 125)
      VIOLET=$(tput setaf 61)
      BLUE=$(tput setaf 33)
      CYAN=$(tput setaf 37)
      GREEN=$(tput setaf 64)
    else
      BASE03=$(tput setaf 8)
      BASE02=$(tput setaf 0)
      BASE01=$(tput setaf 10)
      BASE00=$(tput setaf 11)
      BASE0=$(tput setaf 12)
      BASE1=$(tput setaf 14)
      BASE2=$(tput setaf 7)
      BASE3=$(tput setaf 15)
      YELLOW=$(tput setaf 3)
      ORANGE=$(tput setaf 9)
      RED=$(tput setaf 1)
      MAGENTA=$(tput setaf 5)
      VIOLET=$(tput setaf 13)
      BLUE=$(tput setaf 4)
      CYAN=$(tput setaf 6)
      GREEN=$(tput setaf 2)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    # Linux console colors.
    BASE03="\033[0;30m"
    BASE02="\033[1;30m"
    BASE01="\033[0;32m"
    BASE00="\033[0;33m"
    BASE0="\033[0;34m"
    BASE1="\033[0;36m"
    BASE2="\033[0;37m"
    BASE3="\033[1;37m"
    YELLOW="\033[0;33m"
    ORANGE="\033[0;31m"
    RED="\033[1;31m"
    MAGENTA="\033[1;35m"
    VIOLET="\033[1;35m"
    BLUE="\033[1;34m"
    CYAN="\033[1;36m"
    GREEN="\033[1;32m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
fi

parse_git_dirty() {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working tree clean" ]] && echo "*"
}
parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

k8s_info() {
      k8s_current_context=$(kubectl --kubeconfig ~/.kube/prod-config config current-context 2> /dev/null)
        if [[ $? -eq 0 ]] ; then
            echo -e "(${k8s_current_context}) "
        else
            echo -en "\033[1A"
        fi
    }

PS1="\[${BOLD}${CYAN}\]\u\[$BASE0\]@\[$CYAN\]\h\[$BASE0\]/\[$BLUE\]\w\[$BASE0\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$YELLOW\]\$(parse_git_branch)\n\[$YELLOW\]\$(k8s_info)\n\[$BASE0\]\t $ \[$RESET\]"

# asdf stuff
if [[ -x "$(command -v asdf)" ]]; then
    if [[ $platform == "osx" && "$(command -v brew)" ]]; then
        . $(brew --prefix asdf)/libexec/asdf.sh
        . $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash
    fi
    if [[ $platform == "linux" ]]; then
        . $HOME/.asdf/asdf.sh
        . $HOME/.asdf/completions/asdf.bash
    fi
fi

# export gpg tty
GPG_TTY=$(tty)
export GPG_TTY

#set XDG_CONFIG_HOME
if [[ $platform == "linux" ]]; then
    XDG_CONFIG_HOME="$HOME/.config"
    export XDG_CONFIG_HOME
fi

# remap caps lock to something useful, if a keyboard is installed
if [[ $platform == "linux" ]] && [[ "$(command -v lsusb)" ]]; then
    setxkbmap -option caps:escape
fi

# setup rbenv
if [[ "$(command -v rbenv)" ]]; then
    eval "$(rbenv init -)"
fi

# setup pyenv
if [[ "$(command -v pyenv)" ]]; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi
