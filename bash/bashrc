# Check for os type
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    # linux
    platform='linux'
    path=""
    source /etc/environment
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
    platform='osx'
    path=""
    source /etc/profile
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    # freebsd
    platform='freebsd'
fi

# functions to change path
# [[ ":$PATH:" != *":$HOME/bin:"* ]] && path_prepend $HOME/bin
path_prepend() {
    for arg in "$@"; do
        if [[ ":${PATH}:" != *":${arg}:"* ]]; then
            export PATH="${arg}${PATH:+":$PATH"}"
        fi
    done
}
path_append() {
    for arg in "$@"; do
        if [[ ":${PATH}:" != *":${arg}:"* ]]; then
            export PATH="${PATH:+"$PATH:"}${arg}"
        fi
    done
}

# allow awsudo to get correct env profile
# requires aws, awsudo and jq
# assume working role
awr() {
    if [ -x "$(command -v awsudo)" ] && [ -x "$(command -v jq)" ] && [ -x "$(command -v aws)" ]; then
        export $(awsudo $1 | xargs)
        echo -n "Assumed working role: "
        aws sts get-caller-identity | jq .Arn
    fi
}

# list working roles
lwr() {
    grep '\[profile' ~/.aws/config | awk '{print $2}' | sed 's/]//'
}

# get caller identity
gci() {
    if [ -x "$(command -v jq)" ] && [ -x "$(command -v aws)" ]; then
        aws sts get-caller-identity | jq .Arn
    fi
}

# get ip addresse(s)
gip() {
    ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'
}

# change up N directories
cd..() {
    cd $(printf "%0.s../" $(seq 1 $1 ));
}

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Some exports I like
export VISUAL=vim
export EDITOR="$VISUAL"
export LC_ALL="en_US.UTF-8"

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=5000
HISTFILESIZE=5000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in xterm-color|screen-256color)
    color_prompt=yes
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# Set prompts
if [[ $platform != 'osx' ]]; then
    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt
fi

if [[ $platform == 'osx' ]]; then
    if [ "$color_prompt" = yes ]; then
        CLICOLOR=1
        LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx # solarized
        #   LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd # default linux
        #   LSCOLORS=GxFxCxDxBxegedabagaced # MacOS default
        PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in xterm|rxvt*)
    color_prompt=yes
    PS1="\[\033]0;\u@\h: \w\007\]bash\\$ "
    #   PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# trying to fix colors in tmux on OSX
# and bash-completion
# alias tmux="TERM=screen-256color tmux"
if [[ $platform == 'osx' ]]; then
    alias ic='cd ~/Library/Mobile\ Documents/com~apple~CloudDocs'
    alias ls='ls -G'
    path_append /usr/local/opt/openssl/bin
    [ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# ssh-agent so I don't have to keep typing my passphrase
SSH_ENV=$HOME/.ssh/environment

# start the ssh-agent
function start_agent {
    echo "Initializing new SSH agent..."
    # spawn ssh-agent
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add
}

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi

# add path for $HOME/bin if it exists
if [ -d "$HOME/bin" ]; then
    path_append $HOME/bin
fi

# add ruby gem path for chef if it exists
#path_append $HOME/.chefdk/gem/ruby/2.1.0/bin

# grab the path for the new Chef if chef is installed
# add ruby gem path for chef if it exists
if [ -x "$(command -v chef)" ]; then
    eval "$(chef shell-init bash)"
fi

if [ -x "$(command -v rbenv)" ]; then
    eval "$(rbenv init -)"
fi

# kubectl auto completion
if [ -x "$(command -v kubectl)" ]; then
    source <(kubectl completion bash);
fi

# pyenv
if [ -d "$HOME/.pyenv" ]; then
    PYENV_ROOT="$HOME/.pyenv"
    path_prepend $PYENV_ROOT/bin
fi

#chef inspec outside of rbenv
if [ -d "/opt/inspec/bin" ]; then
    path_prepend /opt/inspec/bin
fi

# setup pyenv
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# set prompt for .git repos
function color_my_prompt {
    local __user_and_host="\[\033[01;32m\]\u@\h"
    local __cur_location="\[\033[01;34m\]\w"
    local __git_branch_color="\[\033[31m\]"
    #local __git_branch="\`ruby -e \"print (%x{git branch 2> /dev/null}.grep(/^\*/).first || '').gsub(/^\* (.+)$/, '(\1) ')\"\`"
    local __git_branch='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`'
    local __prompt_tail="\[\033[35m\]$"
    local __last_color="\[\033[00m\]"
    export PS1="$__user_and_host $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color "
}
color_my_prompt
